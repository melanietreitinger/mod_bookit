{"version":3,"file":"calendar.min.js","sources":["../src/calendar.js"],"sourcesContent":["//Merge Status: seems finished, TODO: test\n\nimport {getString} from 'core/str';\nimport ModalForm from 'core_form/modalform';\nimport {prefetchStrings} from 'core/prefetch';\n\n/**\n * Wait until a global property exists (EventCalendar is loaded asynchronously).\n *\n * @param {String} globalPropertyName\n * @returns {Promise<void>}\n */\nconst theGlobalProperty = (globalPropertyName) =>\n    new Promise(resolve => (function loop() {\n        if (!window[globalPropertyName]) {\n            setTimeout(loop, 20);\n            return;\n        }\n        resolve();\n    })());\n\n/**\n * Initializes the calendar.\n * @param {Number}  cmid         Course-module id\n * @param {String}  eventsource  URL for JSON feed (events.php)\n * @param {Object}  capabilities {addevent: Boolean}\n * @param {String}  lang         Current UI language code\n * @param {Object}  config       Extra config (e.g. {textcolor:'#fff'})\n */\nexport async function init(cmid, eventsource, capabilities, lang, config) {\n    await theGlobalProperty('EventCalendar');\n\n    // Set textcolor.\n    let textcolor = '#ffffff';\n    if (Object.prototype.hasOwnProperty.call(config, 'textcolor')) {\n        textcolor = config.textcolor;\n        //console.log('textcolor set to '+textcolor);\n    }\n\n    // Define toolbarbuttons.\n    let toolbarbuttons = 'prev,next today';\n    if (capabilities.addevent) {\n        toolbarbuttons = 'prev,next today addButton';\n        //console.log(capabilities);\n    }\n\n    //String variables\n    await prefetchStrings('mod_bookit', ['addbooking', 'edit_event']);\n    await prefetchStrings('core', ['today', 'month', 'week']);\n    await prefetchStrings('calendar', ['day', 'upcomingevents']);\n    const str_request_booking   = await getString('addbooking', 'mod_bookit');\n    const str_today             = await getString('today');\n    const str_month             = await getString('month');\n    const str_week              = await getString('week');\n    const str_day               = await getString('day', 'calendar');\n    const str_list              = await getString('upcomingevents', 'calendar');\n\n    //Define viewtype\n    var viewType = window.screen.width <= 1000 ? 'listWeek' : 'timeGridWeek';\n    if (window.screen.width <= 1000) {\n        viewType = 'listWeek';\n    }\n    // weekday visibility from admin settings (injected by PHP)\n    const allowedWeekdays = (window.M && M.cfg && Array.isArray(M.cfg.bookit_allowedweekdays))\n    ? M.cfg.bookit_allowedweekdays.map(x => Number(x))\n    : [1, 2, 3, 4, 5];             // Fallback: Mon‑Fri\n\n    const hiddenDays = [0,1,2,3,4,5,6].filter(d => !allowedWeekdays.includes(d));\n\n     // Runtime filter parameters – mutable via bookitCalendarUpdate()\n    let extraFilterParams = {};   // {room:123, status:2, faculty:'ENG', …}\n\n    var calendar;\n    calendar = new window.EventCalendar(document.getElementById('ec'), {\n        /* ----- appearance / behaviour(improved code readability by intendations) ---------------------------------- */\n        locale            : lang,\n        view              : viewType,\n        firstDay          : 1,\n        weekends          : allowedWeekdays.includes(0) || allowedWeekdays.includes(6),\n        scrollTime        : '09:00:00',\n        slotMinTime       : '07:00:00',\n        dayMaxEvents      : true,\n        nowIndicator      : true,\n        hiddenDays        : hiddenDays,\n        selectable        : false,\n        eventTextColor    : textcolor,\n        eventBackgroundColor : '#035AA3',\n        eventStartEditable   : false,\n        eventDurationEditable: false,\n        buttonText:function(text) {\n            text.today = str_today;\n            text.dayGridMonth = str_month;\n            text.timeGridWeek = str_week;\n            text.timeGridDay = str_day;\n            text.listWeek = str_list;\n            return text;\n        },\n\n        /* ----- custom toolbar button (“Add booking”) ------------------- */\n        customButtons: {\n            addButton: {\n                text: str_request_booking,\n                click: function() {\n                    const modalForm = new ModalForm({\n                        formClass: 'mod_bookit\\\\form\\\\edit_event_form',\n                        args: {\n                            cmid:cmid,\n                        },\n                        modalConfig: {title: getString('edit_event', 'mod_bookit')},\n                    });\n                    modalForm.addEventListener(modalForm.events.FORM_SUBMITTED,() => {\n                        calendar.refetchEvents();\n                    });\n                    modalForm.show();\n                }\n            }\n        },\n\n        /* ----- date click (create new event) --------------------------- */\n        dateClick: function(info) {\n            const weekday = info.date.getUTCDay();   // 0=Sun … 6=Sat\n            if (!allowedWeekdays.includes(weekday)) { return; }\n\n            let d = new Date();\n            let dateoff = new Date(d.setMinutes(d.getMinutes() - d.getTimezoneOffset()));\n            let startdate = info.dateStr;\n\n            if (capabilities.addevent && startdate > dateoff.toISOString()) {\n                const modalForm = new ModalForm({\n                    formClass: 'mod_bookit\\\\form\\\\edit_event_form',\n                    args: {\n                        cmid: cmid,\n                        startdate: startdate,\n                    },\n                    modalConfig: {title: getString('edit_event', 'mod_bookit')},\n                });\n                modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, () => {\n                    calendar.refetchEvents();\n                });\n                modalForm.show();\n            }\n        },\n\n        /* ----- event click (edit) -------------------------------------- */\n        eventClick: function(info) {\n            let id = info.event.id;\n\n            //console.log(info);\n            //console.log(\"cmid: \"+cmid);\n            //console.log(\"id: \"+id);\n            //console.log(info.event.extendedProps.reserved);\n\n            if (info.event.extendedProps.reserved) { return; }\n\n            const modalForm = new ModalForm({\n                formClass: \"mod_bookit\\\\form\\\\edit_event_form\",\n                args: {\n                    cmid:cmid,\n                    id: id\n                },\n                modalConfig: {title: getString('edit_event', 'mod_bookit')},\n            });\n            modalForm.addEventListener(modalForm.events.FORM_SUBMITTED,() => {\n                calendar.refetchEvents();\n            });\n            modalForm.show();\n        },\n        //toolbar configuration\n        headerToolbar: {\n            start: toolbarbuttons,\n            center: 'title',\n            end: 'dayGridMonth,timeGridWeek,timeGridDay,listWeek'\n        },\n        resources   : [],\n        //additional parameters for the filter weekdays functionality\n        eventSources: [{\n            url         : eventsource,\n            extraParams : () => extraFilterParams\n        }],\n\n        views: {\n            timeGridWeek: {pointer: true},\n            resourceTimeGridWeek: {pointer: true},\n            resourceTimelineWeek: {\n                pointer: true,\n                slotMinTime: '09:00',\n                slotMaxTime: '21:00',\n                slotWidth: 80,\n                resources: []\n            }\n        }\n    });\n\n    window.bookitCalendar = calendar;\n    /* --------------------------------------------------------------------\n    Expose update for the filter form (called from view.php). Work in progress\n       -------------------------------------------------------------------- */\n    window.bookitCalendarUpdate = function (paramObj = {}) {\n        extraFilterParams = paramObj;\n        //extraFilterParams      = params || {};\n        window.currentFilterParams = extraFilterParams;\n        calendar.refetchEvents();\n    };\n}"],"names":["cmid","eventsource","capabilities","lang","config","globalPropertyName","Promise","resolve","loop","window","setTimeout","textcolor","Object","prototype","hasOwnProperty","call","toolbarbuttons","addevent","str_request_booking","str_today","str_month","str_week","str_day","str_list","viewType","screen","width","allowedWeekdays","M","cfg","Array","isArray","bookit_allowedweekdays","map","x","Number","hiddenDays","filter","d","includes","extraFilterParams","calendar","EventCalendar","document","getElementById","locale","view","firstDay","weekends","scrollTime","slotMinTime","dayMaxEvents","nowIndicator","selectable","eventTextColor","eventBackgroundColor","eventStartEditable","eventDurationEditable","buttonText","text","today","dayGridMonth","timeGridWeek","timeGridDay","listWeek","customButtons","addButton","click","modalForm","ModalForm","formClass","args","modalConfig","title","addEventListener","events","FORM_SUBMITTED","refetchEvents","show","dateClick","info","weekday","date","getUTCDay","Date","dateoff","setMinutes","getMinutes","getTimezoneOffset","startdate","dateStr","toISOString","eventClick","id","event","extendedProps","reserved","headerToolbar","start","center","end","resources","eventSources","url","extraParams","views","pointer","resourceTimeGridWeek","resourceTimelineWeek","slotMaxTime","slotWidth","bookitCalendar","bookitCalendarUpdate","paramObj","currentFilterParams"],"mappings":"qOA6B2BA,KAAMC,YAAaC,aAAcC,KAAMC,cAjBvCC,mBAkBC,gBAjBxB,IAAIC,SAAQC,SAAY,SAASC,OACxBC,OAAOJ,oBAIZE,UAHIG,WAAWF,KAAM,IAFD,MADDH,IAAAA,uBAqBnBM,UAAY,UACZC,OAAOC,UAAUC,eAAeC,KAAKX,OAAQ,eAC7CO,UAAYP,OAAOO,eAKnBK,eAAiB,kBACjBd,aAAae,WACbD,eAAiB,mCAKf,6BAAgB,aAAc,CAAC,aAAc,qBAC7C,6BAAgB,OAAQ,CAAC,QAAS,QAAS,eAC3C,6BAAgB,WAAY,CAAC,MAAO,yBACpCE,0BAA8B,kBAAU,aAAc,cACtDC,gBAA8B,kBAAU,SACxCC,gBAA8B,kBAAU,SACxCC,eAA8B,kBAAU,QACxCC,cAA8B,kBAAU,MAAO,YAC/CC,eAA8B,kBAAU,iBAAkB,gBAG5DC,SAAWf,OAAOgB,OAAOC,OAAS,IAAO,WAAa,eACtDjB,OAAOgB,OAAOC,OAAS,MACvBF,SAAW,kBAGTG,gBAAmBlB,OAAOmB,GAAKA,EAAEC,KAAOC,MAAMC,QAAQH,EAAEC,IAAIG,wBAChEJ,EAAEC,IAAIG,uBAAuBC,KAAIC,GAAKC,OAAOD,KAC7C,CAAC,EAAG,EAAG,EAAG,EAAG,GAETE,WAAa,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAGC,QAAOC,IAAMX,gBAAgBY,SAASD,SAGrEE,kBAAoB,OAEpBC,SACJA,SAAW,IAAIhC,OAAOiC,cAAcC,SAASC,eAAe,MAAO,CAE/DC,OAAoB1C,KACpB2C,KAAoBtB,SACpBuB,SAAoB,EACpBC,SAAoBrB,gBAAgBY,SAAS,IAAMZ,gBAAgBY,SAAS,GAC5EU,WAAoB,WACpBC,YAAoB,WACpBC,cAAoB,EACpBC,cAAoB,EACpBhB,WAAoBA,WACpBiB,YAAoB,EACpBC,eAAoB3C,UACpB4C,qBAAuB,UACvBC,oBAAuB,EACvBC,uBAAuB,EACvBC,WAAW,SAASC,aAChBA,KAAKC,MAAQzC,UACbwC,KAAKE,aAAezC,UACpBuC,KAAKG,aAAezC,SACpBsC,KAAKI,YAAczC,QACnBqC,KAAKK,SAAWzC,SACToC,MAIXM,cAAe,CACXC,UAAW,CACPP,KAAMzC,oBACNiD,MAAO,iBACGC,UAAY,IAAIC,mBAAU,CAC5BC,UAAW,oCACXC,KAAM,CACFvE,KAAKA,MAETwE,YAAa,CAACC,OAAO,kBAAU,aAAc,iBAEjDL,UAAUM,iBAAiBN,UAAUO,OAAOC,gBAAe,KACvDnC,SAASoC,mBAEbT,UAAUU,UAMtBC,UAAW,SAASC,YACVC,QAAUD,KAAKE,KAAKC,gBACrBxD,gBAAgBY,SAAS0C,oBAE1B3C,EAAI,IAAI8C,KACRC,QAAU,IAAID,KAAK9C,EAAEgD,WAAWhD,EAAEiD,aAAejD,EAAEkD,sBACnDC,UAAYT,KAAKU,WAEjBxF,aAAae,UAAYwE,UAAYJ,QAAQM,cAAe,OACtDvB,UAAY,IAAIC,mBAAU,CAC5BC,UAAW,oCACXC,KAAM,CACFvE,KAAMA,KACNyF,UAAWA,WAEfjB,YAAa,CAACC,OAAO,kBAAU,aAAc,iBAEjDL,UAAUM,iBAAiBN,UAAUO,OAAOC,gBAAgB,KACxDnC,SAASoC,mBAEbT,UAAUU,SAKlBc,WAAY,SAASZ,UACba,GAAKb,KAAKc,MAAMD,MAOhBb,KAAKc,MAAMC,cAAcC,sBAEvB5B,UAAY,IAAIC,mBAAU,CAC5BC,UAAW,oCACXC,KAAM,CACFvE,KAAKA,KACL6F,GAAIA,IAERrB,YAAa,CAACC,OAAO,kBAAU,aAAc,iBAEjDL,UAAUM,iBAAiBN,UAAUO,OAAOC,gBAAe,KACvDnC,SAASoC,mBAEbT,UAAUU,QAGdmB,cAAe,CACXC,MAAOlF,eACPmF,OAAQ,QACRC,IAAK,kDAETC,UAAc,GAEdC,aAAc,CAAC,CACXC,IAActG,YACduG,YAAc,IAAMhE,oBAGxBiE,MAAO,CACH3C,aAAc,CAAC4C,SAAS,GACxBC,qBAAsB,CAACD,SAAS,GAChCE,qBAAsB,CAClBF,SAAS,EACTxD,YAAa,QACb2D,YAAa,QACbC,UAAW,GACXT,UAAW,OAKvB5F,OAAOsG,eAAiBtE,SAIxBhC,OAAOuG,qBAAuB,eAAUC,gEAAW,GAC/CzE,kBAAoByE,SAEpBxG,OAAOyG,oBAAsB1E,kBAC7BC,SAASoC"}