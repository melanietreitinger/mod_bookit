{"version":3,"file":"calendar.min.js","sources":["../src/calendar.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Manage the calendar\n *\n * @module     mod_bookit/calendar\n * @copyright  2024 Melanie Treitinger, Justus Dieckmann RUB\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {getString} from 'core/str';\nimport ModalForm from 'core_form/modalform';\nimport {prefetchStrings} from 'core/prefetch';\n\nexport const theGlobalProperty = (globalPropertyName) => {\n    return new Promise((resolve) => {\n       const innerWait = () => {\n           if (!window[globalPropertyName]) {\n               setTimeout(innerWait, 20);\n           }\n           resolve();\n       };\n       innerWait();\n    });\n};\n\n/**\n * Initializes the calendar.\n * @param {int} cmid\n * @param {string} eventsource\n * @param {array} capabilities\n * @param {string} lang\n * @param {array} config\n * @returns {Promise<void>}\n */\nexport async function init(cmid, eventsource, capabilities, lang, config) {\n    await theGlobalProperty('EventCalendar');\n\n    // Set textcolor.\n    let textcolor = '#ffffff';\n    if (Object.hasOwn(config, 'textcolor')) {\n        textcolor = config.textcolor;\n        console.log('textcolor set to '+textcolor);\n    }\n\n    // Define toolbarbuttons.\n    let toolbarbuttons = 'prev,next today';\n    if (capabilities.addevent) {\n        toolbarbuttons = 'prev,next today, addButton';\n        console.log(capabilities);\n    }\n\n    // String variables.\n    prefetchStrings('mod_bookit', ['addbooking']);\n    prefetchStrings('core', ['today', 'month', 'week']);\n    prefetchStrings('calendar', ['day', 'upcomingevents']);\n    const str_request_booking   = await getString('addbooking', 'mod_bookit');\n    const str_today             = await getString('today');\n    const str_month             = await getString('month');\n    const str_week              = await getString('week');\n    const str_day               = await getString('day', 'calendar');\n    const str_list              = await getString('upcomingevents', 'calendar');\n    /*const str_request_booking = 'XXX';\n    const str_today             = 'XXX';\n    const str_month             = 'XXX';\n    const str_week              = 'XXX';\n    const str_day               = 'XXX';\n    const str_list              = 'XXX';*/\n\n    // Define viewtype.\n    let viewType = 'timeGridWeek';\n    if (window.screen.width <= 1000) {\n        viewType = 'listWeek';\n    }\n\n    var calendar;\n\n    calendar = new window.EventCalendar(document.getElementById('ec'), {\n        locale: lang,\n        view: viewType,\n        firstDay: 1,\n        scrollTime: '09:00:00',\n        slotMinTime: '07:00:00',\n        dayMaxEvents: true,\n        nowIndicator: true,\n        selectable: false,\n        eventTextColor: textcolor,\n        eventBackgroundColor: '#035AA3',\n        eventStartEditable: false,\n        eventDurationEditable: false,\n        buttonText: function (text) {\n            text.today = str_today;\n            text.dayGridMonth = str_month;\n            text.timeGridWeek = str_week;\n            text.timeGridDay = str_day;\n            text.listWeek = str_list;\n            return text;\n        },\n        customButtons: {\n            addButton: {\n                text: str_request_booking,\n                click: function() {\n                    const modalForm = new ModalForm({\n                                    formClass: \"mod_bookit\\\\form\\\\edit_event_form\",\n                                    args: {\n                                        cmid: cmid,\n                                    },\n                                    modalConfig: {title: getString('edit_event', 'mod_bookit')},\n                                });\n                                modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, () => {\n                                    calendar.refetchEvents();\n                                });\n                                modalForm.show();\n                }\n            }\n        },\n        dateClick: function(info) {\n            let d = new Date();\n            let dateoff = new Date(d.setMinutes(d.getMinutes() - d.getTimezoneOffset()));\n            let startdate = info.dateStr;\n            if (capabilities.addevent && startdate > dateoff.toISOString()) {\n                const modalForm = new ModalForm({\n                    formClass: \"mod_bookit\\\\form\\\\edit_event_form\",\n                    args: {\n                        cmid: cmid,\n                        startdate: startdate,\n                    },\n                    modalConfig: {title: getString('edit_event', 'mod_bookit')},\n                });\n                modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, () => {\n                    calendar.refetchEvents();\n                });\n                modalForm.show();\n            }\n        },\n        eventClick: function (info) {\n            let id = info.event.id;\n\n            console.log(info);\n            console.log(\"cmid: \"+cmid);\n            console.log(\"id: \"+id);\n            console.log(info.event.extendedProps.reserved);\n\n            if (!info.event.extendedProps.reserved) {\n                const modalForm = new ModalForm({\n                    formClass: \"mod_bookit\\\\form\\\\edit_event_form\",\n                    args: {\n                        cmid: cmid,\n                        id: id,\n                    },\n                    modalConfig: {title: getString('edit_event', 'mod_bookit')},\n                });\n                modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, () => {\n                    calendar.refetchEvents();\n                });\n                modalForm.show();\n            }\n        },\n        headerToolbar: {\n            start: toolbarbuttons,\n            center: 'title',\n            end: 'dayGridMonth,timeGridWeek,timeGridDay,listWeek'\n        },\n        resources: [],\n        eventSources: [\n            {\n                url: eventsource,\n            },\n        ],\n        views: {\n            timeGridWeek: {pointer: true},\n            resourceTimeGridWeek: {pointer: true},\n            resourceTimelineWeek: {\n                pointer: true,\n                slotMinTime: '09:00',\n                slotMaxTime: '21:00',\n                slotWidth: 80,\n                resources: []\n            }\n        },\n    });\n}\n"],"names":["cmid","eventsource","capabilities","lang","config","theGlobalProperty","textcolor","Object","hasOwn","console","log","toolbarbuttons","addevent","str_request_booking","str_today","str_month","str_week","str_day","str_list","viewType","window","screen","width","calendar","EventCalendar","document","getElementById","locale","view","firstDay","scrollTime","slotMinTime","dayMaxEvents","nowIndicator","selectable","eventTextColor","eventBackgroundColor","eventStartEditable","eventDurationEditable","buttonText","text","today","dayGridMonth","timeGridWeek","timeGridDay","listWeek","customButtons","addButton","click","modalForm","ModalForm","formClass","args","modalConfig","title","addEventListener","events","FORM_SUBMITTED","refetchEvents","show","dateClick","info","d","Date","dateoff","setMinutes","getMinutes","getTimezoneOffset","startdate","dateStr","toISOString","eventClick","id","event","extendedProps","reserved","headerToolbar","start","center","end","resources","eventSources","url","views","pointer","resourceTimeGridWeek","resourceTimelineWeek","slotMaxTime","slotWidth","globalPropertyName","Promise","resolve","innerWait","setTimeout"],"mappings":";;;;;;;0FAgD2BA,KAAMC,YAAaC,aAAcC,KAAMC,cACxDC,kBAAkB,qBAGpBC,UAAY,UACZC,OAAOC,OAAOJ,OAAQ,eACtBE,UAAYF,OAAOE,UACnBG,QAAQC,IAAI,oBAAoBJ,gBAIhCK,eAAiB,kBACjBT,aAAaU,WACbD,eAAiB,6BACjBF,QAAQC,IAAIR,6CAIA,aAAc,CAAC,6CACf,OAAQ,CAAC,QAAS,QAAS,uCAC3B,WAAY,CAAC,MAAO,yBAC9BW,0BAA8B,kBAAU,aAAc,cACtDC,gBAA8B,kBAAU,SACxCC,gBAA8B,kBAAU,SACxCC,eAA8B,kBAAU,QACxCC,cAA8B,kBAAU,MAAO,YAC/CC,eAA8B,kBAAU,iBAAkB,gBAS5DC,SAAW,eACXC,OAAOC,OAAOC,OAAS,MACvBH,SAAW,gBAGXI,SAEJA,SAAW,IAAIH,OAAOI,cAAcC,SAASC,eAAe,MAAO,CAC/DC,OAAQxB,KACRyB,KAAMT,SACNU,SAAU,EACVC,WAAY,WACZC,YAAa,WACbC,cAAc,EACdC,cAAc,EACdC,YAAY,EACZC,eAAgB7B,UAChB8B,qBAAsB,UACtBC,oBAAoB,EACpBC,uBAAuB,EACvBC,WAAY,SAAUC,aAClBA,KAAKC,MAAQ3B,UACb0B,KAAKE,aAAe3B,UACpByB,KAAKG,aAAe3B,SACpBwB,KAAKI,YAAc3B,QACnBuB,KAAKK,SAAW3B,SACTsB,MAEXM,cAAe,CACXC,UAAW,CACPP,KAAM3B,oBACNmC,MAAO,iBACGC,UAAY,IAAIC,mBAAU,CAChBC,UAAW,oCACXC,KAAM,CACFpD,KAAMA,MAEVqD,YAAa,CAACC,OAAO,kBAAU,aAAc,iBAEjDL,UAAUM,iBAAiBN,UAAUO,OAAOC,gBAAgB,KACxDlC,SAASmC,mBAEbT,UAAUU,UAIlCC,UAAW,SAASC,UACZC,EAAI,IAAIC,KACRC,QAAU,IAAID,KAAKD,EAAEG,WAAWH,EAAEI,aAAeJ,EAAEK,sBACnDC,UAAYP,KAAKQ,WACjBnE,aAAaU,UAAYwD,UAAYJ,QAAQM,cAAe,OACtDrB,UAAY,IAAIC,mBAAU,CAC5BC,UAAW,oCACXC,KAAM,CACFpD,KAAMA,KACNoE,UAAWA,WAEff,YAAa,CAACC,OAAO,kBAAU,aAAc,iBAEjDL,UAAUM,iBAAiBN,UAAUO,OAAOC,gBAAgB,KACxDlC,SAASmC,mBAEbT,UAAUU,SAGlBY,WAAY,SAAUV,UACdW,GAAKX,KAAKY,MAAMD,MAEpB/D,QAAQC,IAAImD,MACZpD,QAAQC,IAAI,SAASV,MACrBS,QAAQC,IAAI,OAAO8D,IACnB/D,QAAQC,IAAImD,KAAKY,MAAMC,cAAcC,WAEhCd,KAAKY,MAAMC,cAAcC,SAAU,OAC9B1B,UAAY,IAAIC,mBAAU,CAC5BC,UAAW,oCACXC,KAAM,CACFpD,KAAMA,KACNwE,GAAIA,IAERnB,YAAa,CAACC,OAAO,kBAAU,aAAc,iBAEjDL,UAAUM,iBAAiBN,UAAUO,OAAOC,gBAAgB,KACxDlC,SAASmC,mBAEbT,UAAUU,SAGlBiB,cAAe,CACXC,MAAOlE,eACPmE,OAAQ,QACRC,IAAK,kDAETC,UAAW,GACXC,aAAc,CACV,CACIC,IAAKjF,cAGbkF,MAAO,CACHxC,aAAc,CAACyC,SAAS,GACxBC,qBAAsB,CAACD,SAAS,GAChCE,qBAAsB,CAClBF,SAAS,EACTrD,YAAa,QACbwD,YAAa,QACbC,UAAW,GACXR,UAAW,8GAnKd3E,kBAAqBoF,oBACvB,IAAIC,SAASC,gBACXC,UAAY,KACTxE,OAAOqE,qBACRI,WAAWD,UAAW,IAE1BD,WAEJC"}